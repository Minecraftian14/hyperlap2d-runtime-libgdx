
buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'org.gretty:gretty:3.0.2'
//        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath "org.wisepersist:gwt-gradle-plugin:$gwtPluginVersion"
    }
}

apply plugin: "gwt"
apply plugin: "war"
apply plugin: "org.gretty"

task a {
    println fileTree(dir: 'libs', include: '*.jar').getDir()
    println fileTree(dir: '../src/main/java', include: '**/*.java').getFiles()
    println fileTree(dir: '../src/main/resources', include: '**/*.*').getFiles()
}

gwt {
    gwtVersion = "$gwtFrameworkVersion" // Should match the version used for building the GWT backend. See gradle.properties.
    maxHeapSize = '1G' // Default 256m is not enough for the GWT compiler. GWT is HUNGRY.
    minHeapSize = '1G'

    src = files(file('src/main/java')) // Needs to be in front of "modules" below.
    modules 'games.rednblack.hyperrunner.GdxDefinition'
    devModules 'games.rednblack.hyperrunner.GdxDefinitionSuperdev'
    project.webAppDirName = 'webapp'

    compiler.strict = true
    compiler.disableCastChecking = true
    //// The next line can be useful to uncomment if you want output that hasn't been obfuscated.
//	compiler.style = org.wisepersist.gradle.plugins.gwt.Style.DETAILED
}

group 'games.rednblack.hyperlap2d'
version '0.0.8'

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
}

dependencies {
//    implementation project(':core')
    implementation project(":TestGame")

    implementation "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
    implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
    implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion:sources"
    implementation "com.badlogicgames.gdx:gdx-box2d-gwt:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d-gwt:$gdxVersion:sources"

//    implementation "com.badlogicgames.ashley:ashley:$ashleyVersion:sources"
    compile "net.onedaybeard.artemis:artemis-odb-gwt:2.2.0"
    compile "net.onedaybeard.artemis:artemis-odb-gwt:2.2.0:sources"
    compile "net.onedaybeard.artemis:artemis-odb:2.2.0:sources"

//    implementation "games.rednblack.hyperlap2d:runtime-libgdx:$h2dVersion:sources"
//    implementation project(':')
//    implementation project(':sources')
//    compile fileTree(dir: '../src/main/java', include: '*.java')
//    implementation fileTree(dir: '../src/main/java', include: '**/*.java')
//    implementation fileTree(dir: '../src/main/resources', include: '**/*.*')
    compile fileTree(dir: 'libs', include: '*.jar')

    implementation "com.github.intrigus.gdx-freetype-gwt:gdx-freetype-gwt:$freefontTypeGwtVersion"
    implementation "com.github.intrigus.gdx-freetype-gwt:gdx-freetype-gwt:$freefontTypeGwtVersion:sources"
    implementation "com.github.tommyettinger:regexodus:$regExodusVersion:sources"
    implementation "com.rafaskoberg.gdx:typing-label:$typingLabelVersion:sources"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

jar {
    from fileTree(dir: '../src/main/resources', include: '**/*.*')
}

import org.wisepersist.gradle.plugins.gwt.GwtSuperDev
import org.akhikhl.gretty.AppBeforeIntegrationTestTask

gretty.httpPort = 8080
gretty.resourceBase = project.buildDir.path + "/gwt/draftOut"
gretty.contextPath = "/"
gretty.portPropertiesFileName = "TEMP_PORTS.properties"

task startHttpServer (dependsOn: [draftCompileGwt]) {
    doFirst {
        copy {
            from "webapp"
            into gretty.resourceBase
        }
        copy {
            from "war"
            into gretty.resourceBase
        }
    }
}
task beforeRun(type: AppBeforeIntegrationTestTask, dependsOn: startHttpServer) {
    // The next line allows ports to be reused instead of
    // needing a process to be manually terminated.
    file("build/TEMP_PORTS.properties").delete()
    // Somewhat of a hack; uses Gretty's support for wrapping a task in
    // a start and then stop of a Jetty server that serves files while
    // also running the SuperDev code server.
    integrationTestTask 'superDev'

    interactive false
}

task superDev(type: GwtSuperDev) {
    doFirst {
        gwt.modules = gwt.devModules
    }
}
task dist(dependsOn: [clean, compileGwt]) {
    doLast {
        file("build/dist").mkdirs()
        copy {
            from "build/gwt/out"
            into "build/dist"
        }
        copy {
            from "webapp"
            into "build/dist"
        }
        copy {
            from "war"
            into "build/dist"
        }
    }
}

task addSource {
    doLast {
        sourceSets.main.compileClasspath += files(project(':TestGame').sourceSets.main.allJava.srcDirs)

    }
}

task distZip(type: Zip, dependsOn: dist){
    //// The next lines copy the dist but remove the recompile button (circling arrow) from the HTML page.
    from('build/dist/') {
        exclude '**/*.html'
    }
    from('build/dist/') {
        include '**/*.html'
        filter { String line -> line.replaceAll('<a class="superdev" .+', '') }
    }
    archiveBaseName.set("Hyperlap2D-Runtime-dist")
    //// The result will be in html/build/ with a name containing "dist".
    destinationDir(file("build"))
}

tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)

sourceCompatibility = 8.0
sourceSets.main.java.srcDirs = [ "src/main/java/" ]

